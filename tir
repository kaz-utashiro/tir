#!/bin/bash

##
## tir - tea is ready
##
## Copyright (c) 2014-2017 kaz-utashiro
##

define() { IFS='\n' read -r -d '' ${1} || true ; }

define help <<EOF

tir - tea is ready

Usage: tir [ wait ] [ what ]
	-m #  message
	-w #  time to wait
	-c #  countdown interval
	-C #  message repeat count
	-I #  message repeat interval
	-r    same as -v random
	-v #  voice (-v ? for list names)
	-l #  voice for last message
	-b #  notification sound (-b ? for list names)
	-V #  volume (0 .. 100)
	-i #  iTunes control (*fade, pause, volume, no)
	-E    do not echo message
	-N    do not send notificaiton
	-S    do not speak
	-R    ramen shortcut
	-U    udon shortcut
	-GR   gorgeous ramen
	-GU   gorgeous udon
EOF

while getopts "dxc:C:I:m:eEnNsSi:w:rv:l:V:b:htRUG" OPT
do
    case $OPT in
	d) debug=yes;;
	x) set -x;;
	w) wait="$OPTARG";;
	m) format="$OPTARG";;
	c) countdown="$OPTARG";;
	C) repeat="$OPTARG";;
	I) repeat_interval="$OPTARG";;
	e) echo="yes";;
	E) echo="no";;
	n) notify="yes";;
	N) notify="no";;
	s) speak="yes";;
	S) speak="no";;
	i) itunes="$OPTARG";;
	r) voice="random";;
	v) voice="$OPTARG";;
	l) last_voice="$OPTARG";;
	V) volume="$OPTARG";;
	b) sound="$OPTARG";;
	h) echo -n "$help"; exit;;
	t) test="yes"; notify="no"; speak="no";;
	R) what="ramen"; wait="3min";;
	U) what="uudon"; wait="5min";;
	G) last_voice="good"
	   format="%s is ready ee %s is ready, your %s is ready %s is ready"
	   ;;
    esac
done	
shift $((OPTIND - 1))

[ "$voice" = '?' ] && { say -v '?' ; exit ; }
[ "$sound" = '?' ] && { ls /System/Library/Sounds | sed 's/\..*//' ; exit ; }

case "`uname`" in
    Darwin)
	: ${notify:=yes} ${speak:=yes} ${itunes:=fade} ;;
    *)
	: ${notify:=no} ${speak:=no} ${itunes:=no} ;;
esac

: ${debug:=no}
: ${voice:=Alex} ${sound:=Default}
: ${echo:=yes}
: ${repeat:=1} ${repeat_interval:=2}
: ${format:=%s is ready}
: ${what:=Tea}
: ${countdown:=600 600 60 60 30 30 10}

[[ "$1" =~ ^[0-9] ]] && { wait=$1 ; shift ; }

(($# > 0)) && what="$*"

message=${format//\%s/$what}

[[ "$volume" =~ ^[0-9]+$ ]] && define as_volume_wrap <<EOF
set curVolume to output volume of (get volume settings)
set volume output volume ${volume}
%s
delay 1
set volume output volume curVolume
EOF

notify_message() {

    [ "$notify" = yes ] || return

    local title subtitle sound
    local OPT OPTIND
    while getopts ":b:t:s:" OPT
    do
	case $OPT in
	    b) sound="$OPTARG";;
	    t) title="$OPTARG";;
	    s) subtitle="$OPTARG";;
	esac
    done	
    shift $((OPTIND - 1))

    local script="display notification \"$*\""
    [ "$sound" != "" ]    && script="$script sound name \"$sound\""
    [ "$title" != "" ]    && script="$script with title \"$title\""
    [ "$subtitle" != "" ] && script="$script subtitle \"$subtitle\""

    if [ "$as_volume_wrap" != "" ]
    then
	script=$(printf "$as_volume_wrap" "$script")
    fi

    [ "$debug" = "yes" ] && cat -n <<< "$script"
    osascript <<< "$script" &
}

define as_fade_itunes <<EOF
tell application "iTunes"
	set newVolume to %s
	set oldVolume to sound volume
	if newVolume = oldVolume then return
	set fadeTime to 1.0
	set stepCount to 10
	set delayTime to fadeTime / stepCount
	set step to (newVolume - oldVolume) / stepCount
	if oldVolume < newVolume then
		set min to oldVolume
		set max to newVolume
	else
		set min to newVolume
		set max to oldVolume
	end if
	set v to oldVolume
	repeat
		set v to v + step
		if v < min or max < v then exit repeat
		set sound volume to v
		delay delayTime
	end repeat
end tell
EOF

fade_itunes() {
    printf "$as_fade_itunes" $volume | osascript
}

define as_app_running <<EOF
if application "%s" is running
	"yes"
else
	"no"
end
EOF

app_running() {
    printf "$as_app_running" "$1" | osascript
}

shopt -s nocasematch

echo_message() {
    [ "$echo" = yes ] || return
    echo "$*"
}
read_message() {
    local voice=$1; shift;
    [ "$speak" = yes ] || return
    if [[ "$voice" =~ ^rand ]]
    then
	voice="$(randomvoice)"
	echo_message $voice is speaking
    fi
    local status ovol nvol
    if [ "$itunes" != no ] && status=$(itunes status)
    then
	ovol=$(itunes volume)
	nvol=$((ovol / 2))
	itunes $itunes $nvol
    fi
    say ${voice:+ -v "$voice"} $*
    if [ "$status" = playing ]
    then
	case $itunes in
	    fade|volume) itunes $itunes $ovol;;
	    pause|stop)  itunes play;;
	esac
    fi
}
randomvoice() {
    say -v '?' | randomline | voicename
}
randomline() {
    awk 'BEGIN{srand}{print rand, $0}' | sort -n | head -1 | sed 's/^[^ ]* //'
}
voicename() {
    sed 's/  .*//'
}
randomvoice_perl() {
    perl -le '@_=map/((?: ?\w+)+)/,<>; print $_[rand @_]' <(say -v '?')
}
time2sec() {
    local time="$1"
    if [[ "$time" =~ ^([0-9]+):([0-9]*)$ ]]
    then
	local min=${BASH_REMATCH[1]}
	local sec=${BASH_REMATCH[2]}
	echo $((min * 60 + sec))
    elif [[ "$time" =~ ^([0-9]+)(.*) ]]
    then
	local sec=${BASH_REMATCH[1]}
	local unit=${BASH_REMATCH[2]}
	[[ "$unit" =~ ^m ]] && ((sec *= 60))
	[[ "$unit" =~ ^h ]] && ((sec *= 60 * 60))
	echo $sec
    else
	return 1
    fi
}
sec2time() {
    local sec="$1" min time
    if ((sec >= 60))
    then
	((min = sec / 60))
	((sec = sec % 60))
	time=$(unit $min minute)
    fi
    if ((sec > 0))
    then
	time="${time:+${time} }$(unit ${sec} second)"
    fi
    echo $time
}
unit() {
    local val="$1" unit="$2"
    ((val > 1)) && unit=${unit:+"${unit}s"}
    echo "${val} ${unit}"
}
tell() {
    app="$1"; shift;
    [ "$1" = to ] && shift
    osascript -e "tell application \"$app\" to $*"
}
itunes() {
    local command="$1"; shift;
    case $command in
	pause|play)
	    tell iTunes $command
	    ;;
	status)
	    local status=$(tell iTunes "player state")
	    echo $status
	    [ "$status" != playing ] && return 1
	    ;;
	volume)
	    local volume=$(tell iTunes "sound volume")
	    if (($# == 0))
	    then
		echo $volume
	    else
		local new_volume=$1; shift;
		tell iTunes "set sound volume to $new_volume"
	    fi
	    ;;
	fade|fadeto)
	    local volume=$1; shift;
	    fade_itunes $volume
	    ;;
	*)
	    return 2
	    ;;
    esac
    return 0
}
interval() {
    local time="$1" int=60
    set -- $countdown
    while (($# > 0))
    do
	(($# == 1)) && { int=$1; break; }
	((time <= $1)) && { shift 2; continue; }
	int=$((time % $2 > 0 ? time % $2 : $2))
	break
    done
    echo $((int <= 0 || time < int ? time : int))
}
do_sleep() {
    [ "$test" = "yes" ] && return
    sleep $1
}

[ $(app_running iTunes) = "yes" ] || itunes=no

if [ "$wait" != "" ]
then
    sleep=$(time2sec $wait)
else
    sleep=0
fi

while ((sleep > 0))
do
    time=$(sec2time $sleep)
    echo_message "$time left"
    read_message "$voice" "$time" &

    interval=$(interval $sleep)
    do_sleep $interval
    ((sleep -= interval))
done

echo_message "$message"

time=$(date "+%H:%M:%S")
notify_message -b "$sound" -t "TIR" -s "$time" "$message"

while ((repeat-- > 0))
do
    read_message "${last_voice:-$voice}" "$message"
    ((repeat > 0)) && do_sleep $repeat_interval
done
